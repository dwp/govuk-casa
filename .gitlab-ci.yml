include:
  - project: dwp/engineering/pipeline-solutions/gitlab/functions
    ref: feat/npm-public-publish
    file: functions/node.yml
  - project: dwp/engineering/pipeline-solutions/gitlab/functions
    ref: 3.46.9
    file: functions/auto-tag-merge.yml

variables:
  NODE_IMAGE: node:18.12.0@sha256:cef9966b19672effeafcf1a67b8add742c3e46ca7dd5532efff60820526c2e95
  NODE_PUBLISH_TO_GITLAB: "true"
  NODE_PUBLISH_TO_NPMJS: "true"
  AUTO_TAG_MERGE_PREPARE_MR: "true"

# ---------------------------------------------------------- blueprint overrides

node-coverage:
  variables:
    TEST_EXECUTABLE: 'npm run test'

# This is an OSS project so the @dwp scope point to public npm registry. However
# for publishing to the internal GitLab we need to remove that specific config.
node-publish-gitlab:
  before_script:
    - if [ -f .npmrc ]; then sed -i.bak '/^@dwp:registry.*$/d' .npmrc; fi

# ------------------------------------------------------------------ custom jobs

e2e-dast:
  stage: security-dynamic-analysis
  image: $NODE_IMAGE
  tags:
    - docker
  services:
    - name: owasp/zap2docker-stable@sha256:0f5578a52ae843dd9a90ac438761ef042acf2e94ca1d43181cd759759a213e66
      alias: zap
      entrypoint: [""]
      command: ["zap.sh", "-daemon", "-host", "0.0.0.0", "-port", "8080", "-config", "api.key=secret", "-config", "api.addrs.addr.name=.*", "-config", "api.addrs.addr.regex=true"]
  needs:
    - node-modules
  variables:
    # ref: https://docs.gitlab.com/runner/executors/docker.html#create-a-network-for-each-job
    # Required so ZAP can connect to servers being spun up in this build container
    FF_NETWORK_PER_BUILD: 1
  before_script:
    - apt-get update
    - apt-get install -y jq
  script:
    - "until wget -qO- --header 'X-ZAP-Api-Key: secret' http://zap:8080/JSON/core/view/zapHomePath >/dev/null 2>&1; do echo 'Waiting for ZAP ...'; sleep 1; done"
    - ./node_modules/.bin/spiderplan --worker-init ./tests/e2e/worker-init.js --language en ./tests/e2e/personas/**/traversal.yaml --workers 1 --zap --zap-proxy 'http://zap:8080/' --zap-target-hostname "$(hostname)"
    - "wget -qO- --header 'X-ZAP-Api-Key: secret' http://zap:8080/OTHER/core/other/jsonreport > gl-dast-report.json"
    - "wget -qO- --header 'X-ZAP-Api-Key: secret' http://zap:8080/OTHER/core/other/htmlreport > gl-dast-report.html"
    - if [[ "$(jq '[.site[].alerts[].riskcode | select(. | tonumber >= 3)] | length' gl-dast-report.json)" -ne "0" ]]; then echo 'Found HIGH or CRITICAL vulnerabilities reported. Job failed.'; exit 1; fi
  artifacts:
    when: always
    expire_in: 3 months
    paths:
      - gl-dast-report.html
      - gl-dast-report.json
    reports:
      dast:
        - gl-dast-report.json

# API documentation, published on GitLab Pages
pages:
  stage: publish
  extends: .node-common
  script: npm run build:api-docs -- -d ./public/ || true
  artifacts:
    paths:
      - public



# Move all this into functions when tested and working on branch

node-publish-npmjs:
  image: node:18.12.1@sha256:c47a2c61e635eb4938fcd56a1139b552300624b53e3eca06b5554a577f1842cf
  cache:
  script:
    # Fail if any inputs are missing/invalid
    - |
      export PACKAGE_NAME=$(node -p "require('./package.json').name")
      export PACKAGE_VERSION=$(node -p "require('./package.json').version")
      export PACKAGE_VERSION="6.9.2"
      export GITLAB_REGISTRY="$CI_API_V4_URL/packages/npm/"
      export GITLAB_REGISTRY_NOPROTO=$(echo "$GITLAB_REGISTRY" | sed 's|https://||g')

      if ! echo "$PACKAGE_NAME" | grep -q "^@dwp/"; then
        echo "Only packages scoped with '@dwp' can be published with this job."
        exit 1
      fi
    - echo "Mirroring '${PACKAGE_NAME}@${PACKAGE_VERSION}'"

    # Determine the tarball for the given package version from GitLab
    - |
      cat<<EOF>.npmrc
      @dwp:registry=${GITLAB_REGISTRY}
      //${GITLAB_REGISTRY_NOPROTO}:_authToken=${CI_JOB_TOKEN}
      EOF
    - TARBALL_URI=$(npm view ${PACKAGE_NAME}@${PACKAGE_VERSION} dist.tarball)
    - echo "Using tarball source '${TARBALL_URI}'"

    # Determine which dist-tag to apply (will match that used in GitLab). Fails
    # if more than one tag is associated with the semantic version, or no tag
    # matches version. This prevents older versions being published and
    # clobbering existing tags.
    - |
      DIST_TAGS=$(npm view --json ${PACKAGE_NAME}@${PACKAGE_VERSION} dist-tags)
      DIST_TAG=$(node -p "t=Object.entries($DIST_TAGS).filter(([k,v]) => v === '${PACKAGE_VERSION}'); l=t.length; l == 1 ? t[0][0] : (l === 0 ? '_none_' : '_multiple');")
      if [ "$DIST_TAG" == "_none_" ] || [ -z "$DIST_TAG" ]; then
        echo "Could not find a dist tag for version '${PACKAGE_VERSION}' in list. Is this an older version? Only the most recent version of the package can currently be mirrored by this script."
        echo "$DIST_TAGS"
        exit 1
      elif [ "$DIST_TAG" == "_multiple_" ]; then
        echo "Found multiple dist tag matches for version '${PACKAGE_VERSION}' in list. This script currently only supports publishing under a single dist-tag."
        echo "$DIST_TAGS"
        exit 1
      fi
    - echo "Applying dist-tag '${DIST_TAG}'"

    # Publish the tarball to npmjs.com
    - |
      cat<<EOF>.npmrc
      registry=https://registry.npmjs.org/
      @dwp:registry=https://registry.npmjs.org/
      //registry.npmjs.org/:_authToken=${NODE_PUBLISH_PUBLIC_NPM_TOKEN}
      EOF
  rules:
    - when: manual
