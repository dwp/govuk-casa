/**
 * CASA configuration entry point.
 *
 * Configuration object:
 * {
 *   # If your app runs under a directory, specify it here (inc. trailing slash)
 *   mountUrl: "<string>",
 * }
 *
 * Once your CASA app instance is created, you must attach your own project
 * route handlers to the Express router generated by CASA; available in the
 * `.router` property of the returned CASA app instance.
 */

// Globals
global.GOVUK_CASA_DIR = __dirname;

// Deps
const expressJs = require('express');
const expressSession = require('express-session');
const npath = require('path');
const csrf = require('csurf');
const expressBodyParser = require('body-parser');
const logger = require('./lib/Logger')();
const PageDirectory = require('./lib/PageDirectory');
const I18n = require('./lib/I18n');
const Casa = require('./lib/Casa');

const endSession = require('./lib/bootstrap/end-session.js');

/**
 * Create a new CASA application instance, that will decorate a specified
 * ExpressJS app with all CASA functionality.
 *
 * @param {express} expressApp The ExpressJS app to decorate
 * @param {object} config CASA configuration
 * @returns {object} CASA assets
 */
function CasaBootstrap(expressApp, config) {
  const expressRouter = expressJs.Router();

  const casa = new Casa(expressApp, expressRouter);

  try {
    casa.loadConfig(config);
  } catch (ex) {
    logger.fatal(`[CONFIG ERROR] ${ex.message}`);
    return process.exit(1);
  }

  // Prepare an instance of the I18n utility that's required by the various
  // middleware functions
  const localeDirs = [
    npath.resolve(__dirname, './app/locales'),
    ...config.i18n.dirs,
  ];
  const I18nUtility = I18n(localeDirs, config.i18n.locales);

  // Pre-journey middleware
  const commonMiddlewareArgs = [casa, expressSession, expressJs.static, I18nUtility];
  const mountCommonMiddleware = casa.mountCommonExpressMiddleware.bind(...commonMiddlewareArgs);

  // Mount custom middleware with callback
  if (typeof config.mountController === 'function') {
    config.mountController.call({ expressApp, expressRouter }, mountCommonMiddleware);
  } else {
    // Mount all pre-journey middleware
    mountCommonMiddleware();
  }

  // Mount the router onto the path defined in `mountUrl`.
  // This must be done after all CASA middleware has been mounted.
  expressApp.use(config.mountUrl, expressRouter);
  logger.info(`Routes mounted onto ${config.mountUrl}`);

  /**
   * Generate CSRF protection to use on all mutating (POST) requests. The
   * `csrfSupplyToken` function will make the current token available to views
   * via the `csrfToken` variable, which you can use as so:
   *   <input type="hidden" name="_csrf" value="{{ csrfToken }}">
   */
  const bodyParser = expressBodyParser.urlencoded({
    // Adds support for array[style][params] -> objects
    extended: true,
  });
  const csrfProtection = csrf({
    cookie: false,
    sessionKey: 'session',
    value: (req) => {
      /* eslint-disable no-underscore-dangle */
      // Here we clear the token after extracting to maintain cleaner data. It
      // is only used for this CSRF purpose.
      const token = req.body._csrf;
      delete req.body._csrf;
      return token;
      /* eslint-enable no-underscore-dangle */
    },
  });

  /**
   * @param {object} req Request
   * @param {object} res Response
   * @param {Function} next Next handler
   * @returns {void}
   */
  const csrfSupplyToken = (req, res, next) => {
    res.locals.csrfToken = req.csrfToken();
    next();
  };
  const csrfMiddleware = [
    bodyParser,
    csrfProtection,
    csrfSupplyToken,
  ];

  /**
   * Load page and journey definitions. The calling application should call this
   * function once all custom routes and configuration has been put in place -
   * it should be the last call made just before starting the HTTP server.
   *
   * @param  {object} pages Page definitions, indexed by page id (url slug)
   * @param  {UserJourney} journey Journey definition
   * @return {void}
   */
  function loadDefinitions(pages, journey) {
    // Wrap page meta in the directory wrapper for simpler, consistent querying
    const pageDirectory = new PageDirectory(pages);

    // Add the `review` page definition, if it makes up part of the journey
    if (journey.containsWaypoint('review') && typeof pages.review === 'undefined') {
      /* eslint-disable-next-line global-require,no-param-reassign */
      pages.review = require('./app/page-definitions/review.js')(expressApp, pageDirectory, journey);
    }

    // Mount journey-management middleware
    casa.mountJourneyExpressMiddleware(csrfMiddleware, pageDirectory, journey);
  }

  return {
    config: casa.getConfig(),
    router: expressRouter,
    loadDefinitions,
    csrfMiddleware,
    endSession,
  };
}

module.exports = CasaBootstrap;
